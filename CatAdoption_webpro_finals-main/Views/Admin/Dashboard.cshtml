<!-- Background Image Section (Illustrated Style) -->
<div class="background-section" style="background-image: url('https://i.pinimg.com/1200x/05/95/60/059560e066e9c26b64b529aaa38de2d3.jpg'); background-size: cover; background-position: center; padding: 80px 0; color: white;">
    <div class="container text-center">
        <h3 class="mb-4" style="font-size: 2.5rem; font-weight: bold;">Welcome Back Admin!</h3>

        <!-- Clock Display -->
        <p id="clock" class="mb-4" style="font-size: 2rem; font-weight: 600;"></p>

        <!-- Buttons to Add New Cat and View Adopters with Space Between -->
        <div class="d-flex justify-content-center mb-4" style="gap: 15px;">
            <a href="@Url.Action("Create", "Cats")" class="btn btn-gradient btn-lg">Add New Cat</a>
            <a href="@Url.Action("AdopterIndex", "Admin")" class="btn btn-gradient btn-lg">View Adopters</a>
        </div>
    </div>
</div>

<!-- Card-style Cat Management -->
<div class="container my-5">
    <div class="row justify-content-center">
        @foreach (var cat in ViewBag.Cats)
        {
            <div class="col-md-3 col-sm-6 mb-4">
                <div class="card shadow-sm border-light p-3" style="border-radius: 15px; overflow: hidden;">
                    <img src="@cat.ImageUrl" alt="Image of @cat.Name" class="card-img-top img-fluid rounded" style="max-height: 150px; object-fit: cover;" />
                    <div class="card-body p-3">
                        <h5 class="card-title">@cat.Name</h5>
                        <p class="card-text"><strong>Breed:</strong> @cat.Breed</p>
                        <p class="card-text"><strong>Age:</strong> @cat.Age</p>
                        <p class="card-text"><strong>Description:</strong> @cat.Description</p>
                        <p class="card-text">
                            <span class="badge @(cat.AvailableForAdoption ? "bg-success" : "bg-secondary")">
                                @(cat.AvailableForAdoption ? "Available" : "Adopted")
                            </span>
                        </p>
                        <div class="d-flex justify-content-between mt-2">
                            <!-- Edit Button -->
                            <a href="@Url.Action("EditCat", "Admin", new { id = cat.Id })" class="btn btn-primary btn-sm">Edit</a>
                             <!-- Delete Button -->
                            <form action="@Url.Action("DeleteCat", "Admin", new { id = cat.Id })" method="post" style="display:inline;">
                                @Html.AntiForgeryToken() <!-- Add Anti-forgery Token -->
                                <button type="submit" class="btn btn-danger btn-sm" onclick="return confirm('Are you sure you want to delete this cat?');">Delete</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Custom Styles -->
<style>
    body {
        background-color: #becbb279;
        font-family: 'Poppins', sans-serif;
        color: #333;
        padding: 0px 0;
    }

    h1, h2 {
        font-family: 'Roboto', sans-serif;
        color: #e85c84;
        letter-spacing: 1.5px;
        text-transform: uppercase;
    }

    .background-section {
        background-color: #f8e0e0;
        border-radius: 0 0 20px 20px;
    }

    .btn-gradient {
        background: linear-gradient(135deg, #f8a5c2, #e85c84);
        border: none;
        color: white;
        font-weight: 600;
        padding: 12px 25px;
        border-radius: 30px;
        text-transform: uppercase;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }

    .btn-gradient:hover {
        background: linear-gradient(135deg, #ff6b81, #f67280);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
        transform: translateY(-3px);
    }

    .card {
        border-radius: 15px;
        background-color: #9fb88879;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        border: none;
        overflow: hidden;
        transition: transform 0.3s ease;
    }

    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    }

    .card-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: #333;
        margin-bottom: 10px;
    }

    .card-text {
        font-size: 0.95rem;
        color: #070606;
        margin-bottom: 10px;
    }

    .badge {
        font-size: 0.9rem;
        padding: 6px 12px;
    }

    .btn-info {
        background-color: #3498db;
        color: white;
        font-weight: 600;
        border-radius: 30px;
        text-transform: uppercase;
        padding: 8px 16px;
    }

    .btn-info:hover {
        background-color: #2980b9;
    }

    .btn-sm {
        font-size: 0.9rem;
        padding: 8px 12px;
        border-radius: 25px;
    }
</style>

<!-- JavaScript for Real-Time Clock -->
<script>
    function updateClock() {
        const now = new Date();
        const hours = now.getHours().toString().padStart(2, '0');
        const minutes = now.getMinutes().toString().padStart(2, '0');
        const seconds = now.getSeconds().toString().padStart(2, '0');
        const timeString = `${hours}:${minutes}:${seconds}`;

        document.getElementById('clock').textContent = timeString;
    }

    // Update clock every second
    setInterval(updateClock, 1000);

    // Initial clock update
    updateClock();
</script>
